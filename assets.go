// Code generated by go-bindata.
// sources:
// assets/badge.svg
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBadgeSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4f\x6f\xda\x30\x14\xbf\xf7\x53\x3c\xb9\x9a\xb4\x4a\x40\x1c\x32\x28\xed\x62\x7a\x58\xd5\xee\xb2\xcb\xfe\x70\x77\x12\x27\xf1\x6a\x1c\x64\x1b\x02\xad\xfa\xdd\xf7\xec\x91\x96\x4a\x64\x54\x9a\x38\x24\x7e\xfc\xfe\xbc\xf7\x7e\x56\xd2\x9b\xed\x52\xc1\x46\x18\x2b\x1b\xcd\x48\x3c\xa2\x04\x84\xce\x9b\x42\xea\x8a\x91\x5f\x3f\xef\x86\x33\x72\x33\x3f\x4b\xed\xa6\x02\x44\x6a\xcb\x48\xed\xdc\xea\x3a\x8a\xda\xb6\x1d\xb5\xc9\xa8\x31\x55\x34\xa6\x94\x46\x88\x20\xd0\xca\xc2\xd5\x8c\x60\x81\x40\x2d\x64\x55\x3b\x46\x66\x13\x32\x3f\x03\x48\x95\xd4\x82\x9b\x7b\xc3\x0b\x29\xb4\x03\x59\x30\x92\x11\xd8\x8e\x19\x41\xf0\x0e\x1f\x31\xa5\x1f\x02\x14\xc1\xd6\x35\x2b\x68\xca\xd2\x0a\x17\xfe\xf7\xe7\x61\xde\xa8\xc6\x30\x72\x9e\x65\xd9\xbe\xd2\xac\x78\x2e\xdd\x8e\x91\x51\x4c\x20\x3a\xc6\x8d\x7b\x91\x69\xf4\xb6\xa3\x50\x5b\x72\xfb\x10\x5a\xe3\x5d\x27\x46\xe4\xae\x6f\x2e\x30\x5b\x46\x12\x02\xa5\x54\x0a\xfb\x2a\xcb\xf2\x45\xdb\x0b\x85\xb7\x0a\xfc\x2b\x23\x6b\xa3\x3e\x9e\xf3\x8b\x4e\x76\xc5\x5d\xdd\xf1\x26\x13\x94\x42\xcf\x6f\x14\x68\x8d\x1e\x9b\x4f\xd3\xaf\xf4\xf1\x75\xa0\x03\xec\xd3\x13\x8c\xbe\xf8\x35\xc0\xf3\x73\xc7\x41\xb4\x27\x25\x57\x7d\xa4\x60\x9d\x5d\xbc\xf5\x98\x4d\x5e\xe1\x69\x54\xed\x7b\x3d\x9c\xc4\x89\xad\x1b\x72\x9d\xd7\x7e\xe9\x4b\x59\x14\x4a\xe0\xa8\x8d\x76\xc3\x92\x2f\xa5\xc2\x5d\xde\x8a\xdf\x7c\xb1\x86\x1f\x5c\xdb\xc1\x42\x98\x82\x6b\x3e\xb8\x17\x5a\x6c\xf8\xc0\x62\x6d\x68\x85\x91\xe5\x9e\x63\xe5\xa3\xc0\x38\xc6\xdd\x02\xbc\x3a\x6c\x43\xea\x18\x3f\x3e\x2f\x5f\xf6\x48\x63\xff\xfb\x7b\x3c\x08\x2e\xf1\x51\xee\x14\xaa\x04\xc1\x36\xe4\x70\x9d\x35\xaa\xf8\x4c\xe6\x77\x52\x09\x58\x78\x3f\x99\x73\x87\x97\x19\xbe\x0b\xbb\x56\x0e\xcd\x4d\x1a\x79\xb3\x3e\xdf\xe9\xff\xca\x1e\xd7\x4d\xa6\xa7\xe7\x99\xfb\x38\xbd\x85\xe6\x4b\x81\x89\xfe\xb3\xd1\x64\xd2\x8b\x3f\x4e\x98\xc6\xef\xec\x60\x3f\xd2\x09\xff\x29\xed\x41\x1f\x87\xcf\xe8\x3b\xdc\xf3\x5a\xe4\x0f\xa2\x00\xaf\x7b\xcb\xdd\xc9\x1d\x5c\x5e\x9d\xe0\x84\x9b\x9c\xfa\x8f\xd1\xfc\xec\x4f\x00\x00\x00\xff\xff\xe1\xc5\x69\x59\xdc\x04\x00\x00")

func assetsBadgeSvgBytes() ([]byte, error) {
	return bindataRead(
		_assetsBadgeSvg,
		"assets/badge.svg",
	)
}

func assetsBadgeSvg() (*asset, error) {
	bytes, err := assetsBadgeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/badge.svg", size: 1244, mode: os.FileMode(420), modTime: time.Unix(1445682995, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/badge.svg": assetsBadgeSvg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"badge.svg": &bintree{assetsBadgeSvg, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

